package com.goertek.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.goertek.bean.CityAir;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY_AIR".
*/
public class CityAirDao extends AbstractDao<CityAir, Long> {

    public static final String TABLENAME = "CITY_AIR";

    /**
     * Properties of entity CityAir.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ranking = new Property(1, int.class, "ranking", false, "RANKING");
        public final static Property CityName = new Property(2, String.class, "cityName", false, "CITY_NAME");
        public final static Property ProvinceName = new Property(3, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property Aqi = new Property(4, int.class, "aqi", false, "AQI");
        public final static Property Quality = new Property(5, String.class, "quality", false, "QUALITY");
        public final static Property Pm2_5 = new Property(6, String.class, "pm2_5", false, "PM2_5");
        public final static Property UpdateTime = new Property(7, String.class, "updateTime", false, "UPDATE_TIME");
    };


    public CityAirDao(DaoConfig config) {
        super(config);
    }
    
    public CityAirDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_AIR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RANKING\" INTEGER NOT NULL ," + // 1: ranking
                "\"CITY_NAME\" TEXT NOT NULL ," + // 2: cityName
                "\"PROVINCE_NAME\" TEXT NOT NULL ," + // 3: provinceName
                "\"AQI\" INTEGER NOT NULL ," + // 4: aqi
                "\"QUALITY\" TEXT," + // 5: quality
                "\"PM2_5\" TEXT NOT NULL ," + // 6: pm2_5
                "\"UPDATE_TIME\" TEXT);"); // 7: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_AIR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CityAir entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRanking());
        stmt.bindString(3, entity.getCityName());
        stmt.bindString(4, entity.getProvinceName());
        stmt.bindLong(5, entity.getAqi());
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(6, quality);
        }
        stmt.bindString(7, entity.getPm2_5());
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CityAir readEntity(Cursor cursor, int offset) {
        CityAir entity = new CityAir( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // ranking
            cursor.getString(offset + 2), // cityName
            cursor.getString(offset + 3), // provinceName
            cursor.getInt(offset + 4), // aqi
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // quality
            cursor.getString(offset + 6), // pm2_5
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CityAir entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRanking(cursor.getInt(offset + 1));
        entity.setCityName(cursor.getString(offset + 2));
        entity.setProvinceName(cursor.getString(offset + 3));
        entity.setAqi(cursor.getInt(offset + 4));
        entity.setQuality(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPm2_5(cursor.getString(offset + 6));
        entity.setUpdateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CityAir entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CityAir entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
